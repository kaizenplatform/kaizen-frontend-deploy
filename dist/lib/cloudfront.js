'use strict';function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const AWS=require('aws-sdk');const recursive=require('recursive-readdir');const chalk=require('chalk');module.exports={invalidate:(()=>{var _ref=_asyncToGenerator(function*(localDir,awsAccessKeyId,awsSecretAccessKey,distributionId,s3Prefix=''){return new Promise(function(resolve,reject){console.log(chalk.cyan('\nInvalidating Cloudfront...'));const cloudfront=new AWS.CloudFront({accessKeyId:awsAccessKeyId,secretAccessKey:awsSecretAccessKey});const invalidateList=[`${s3Prefix}/`];const dir=localDir.replace(/\/$/,'');recursive(dir,function(err,files){if(err){console.error(chalk.red(err));process.exit(1)}files.forEach(function(file){invalidateList.push(file.replace(dir,s3Prefix))})});const params={DistributionId:distributionId,InvalidationBatch:{CallerReference:Date.now().toString(),Paths:{Quantity:invalidateList.length,Items:invalidateList}}};cloudfront.createInvalidation(params,function(err,data){if(err){console.error('creating invalidation error',err.stack);process.exit(1)}console.log(chalk.green('Created invalidation successfully.'));console.log(chalk.gray(`  Invalidation ID: ${data.Invalidation.Id}`));console.log(chalk.gray(`  Object path:`));data.Invalidation.InvalidationBatch.Paths.Items.forEach(function(path){console.log(chalk.gray(`    ${path}`))});console.log('Waiting for invalidation completed...');const params={DistributionId:distributionId,Id:data.Invalidation.Id};cloudfront.waitFor('invalidationCompleted',params,function(err,data){if(err){console.error(chalk.red('Wating invalidationCompleted error'),err.stack);reject(err.stack);process.exit(1)}console.log('\u2728  Done.');resolve()})})})});function invalidate(_x,_x2,_x3,_x4){return _ref.apply(this,arguments)}return invalidate})()};